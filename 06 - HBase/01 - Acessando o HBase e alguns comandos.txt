
PS E:\> cd projetos\docker-bigdata

PS E:\projetos\docker-bigdata> docker-compose up -d
Docker Compose is now in the Docker CLI, try `docker compose up`

Starting zookeeper ... done
Starting namenode  ... done
Starting spark     ... done
Starting database  ... done
Starting datanode     ... done
Starting hbase-master              ... done
Starting hive-metastore-postgresql ... done
Starting hive_metastore            ... done
Starting hive-server               ... done

PS E:\projetos\docker-bigdata> docker ps
CONTAINER ID   IMAGE                    COMMAND                  CREATED       STATUS                   PORTS                                                                NAMES
55c8f53a53fe   fjardim/hive             "entrypoint.sh /bin/…"   10 days ago   Up 4 minutes             0.0.0.0:10000->10000/tcp, 10002/tcp                                  hive-server
eb174de255ac   fjardim/hive             "entrypoint.sh /opt/…"   10 days ago   Up 5 minutes             10000/tcp, 0.0.0.0:9083->9083/tcp, 10002/tcp                         hive_metastore
57c0c1d26f45   fjardim/hive-metastore   "/docker-entrypoint.…"   10 days ago   Up 5 minutes             5432/tcp                                                             hive-metastore-postgresql
4820f250bc3f   fjardim/datanode         "/entrypoint.sh /run…"   10 days ago   Up 5 minutes (healthy)   0.0.0.0:50075->50075/tcp                                             datanode
9292cb351724   fjardim/hbase-master     "/entrypoint.sh /run…"   10 days ago   Up 5 minutes             16000/tcp, 0.0.0.0:16010->16010/tcp                                  hbase-master
7733e1ee357e   fjardim/namenode_sqoop   "/entrypoint.sh /run…"   10 days ago   Up 5 minutes (healthy)   0.0.0.0:50070->50070/tcp                                             namenode
0902c04b6407   fjardim/mysql            "docker-entrypoint.s…"   10 days ago   Up 5 minutes             33060/tcp, 0.0.0.0:33061->3306/tcp                                   database
16e81b79a174   fjardim/jupyter-spark    "/opt/docker/bin/ent…"   10 days ago   Up 5 minutes             0.0.0.0:4040-4043->4040-4043/tcp, 0.0.0.0:8889->8889/tcp, 8899/tcp   spark
e4b52f9b7f9a   fjardim/zookeeper        "/bin/sh -c '/usr/sb…"   10 days ago   Up 5 minutes             22/tcp, 2888/tcp, 3888/tcp, 0.0.0.0:2181->2181/tcp                   zookeeper

PS E:\projetos\docker-bigdata> docker exec -it hbase-master bash

root@hbase-master:/# hbase version
HBase 1.2.6
Source code repository file:///home/busbey/projects/hbase/hbase-assembly/target/hbase-1.2.6 revision=Unknown
Compiled by busbey on Mon May 29 02:25:32 CDT 2017
From source with checksum 7e8ce83a648e252758e9dae1fbe779c9

####################################### ACESSANDO O HBASE
root@hbase-master:/# hbase shell 
2021-05-06 13:25:09,642 WARN  [main] util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
HBase Shell; enter 'help<RETURN>' for list of supported commands.
Type "exit<RETURN>" to leave the HBase Shell
Version 1.2.6, rUnknown, Mon May 29 02:25:32 CDT 2017

hbase(main):001:0> status
1 active master, 0 backup masters, 1 servers, 1 dead, 3.0000 average load

hbase(main):002:0> version
1.2.6, rUnknown, Mon May 29 02:25:32 CDT 2017

hbase(main):003:0> table_help
Help for table-reference commands.

You can either create a table via 'create' and then manipulate the table via commands like 'put', 'get', etc.
See the standard help information for how to use each of these commands.

However, as of 0.96, you can also get a reference to a table, on which you can invoke commands.
For instance, you can get create a table and keep around a reference to it via:

   hbase> t = create 't', 'cf'

Or, if you have already created the table, you can get a reference to it:

   hbase> t = get_table 't'

You can do things like call 'put' on the table:

  hbase> t.put 'r', 'cf:q', 'v'

which puts a row 'r' with column family 'cf', qualifier 'q' and value 'v' into table t.

To read the data out, you can scan the table:

  hbase> t.scan

which will read all the rows in table 't'.

Essentially, any command that takes a table name can also be done via table reference.
Other commands include things like: get, delete, deleteall,
get_all_columns, get_counter, count, incr. These functions, along with
the standard JRuby object methods are also available via tab completion.

For more information on how to use each of these commands, you can also just type:

   hbase> t.help 'scan'

which will output more information on how to use that command.

You can also do general admin actions directly on a table; things like enable, disable,
flush and drop just by typing:

   hbase> t.enable
   hbase> t.flush
   hbase> t.disable
   hbase> t.drop

Note that after dropping a table, your reference to it becomes useless and further usage
is undefined (and not recommended).

hbase(main):004:0> whoami
root (auth:SIMPLE)
    groups: root

hbase(main):005:0> help ####################################################### DESTA FORMA MOSTRA AS OPÇÕES DE COMANDOS
HBase Shell, version 1.2.6, rUnknown, Mon May 29 02:25:32 CDT 2017
Type 'help "COMMAND"', (e.g. 'help "get"' -- the quotes are necessary) for help on a specific command.
Commands are grouped. Type 'help "COMMAND_GROUP"', (e.g. 'help "general"') for help on a command group.

COMMAND GROUPS:
  Group name: general
  Commands: status, table_help, version, whoami

  Group name: ddl
  Commands: alter, alter_async, alter_status, create, describe, disable, disable_all, drop, drop_all, enable, enable_all, exists, get_table, is_disabled, is_enabled, list, locate_region, show_filters

  Group name: namespace
  Commands: alter_namespace, create_namespace, describe_namespace, drop_namespace, list_namespace, list_namespace_tables

  Group name: dml
  Commands: append, count, delete, deleteall, get, get_counter, get_splits, incr, put, scan, truncate, truncate_preserve

  Group name: tools
  Commands: assign, balance_switch, balancer, balancer_enabled, catalogjanitor_enabled, catalogjanitor_run, catalogjanitor_switch, close_region, compact, compact_rs, flush, major_compact, merge_region, move, normalize, normalizer_enabled, normalizer_switch, split, trace, unassign, wal_roll, zk_dump

  Group name: replication
  Commands: add_peer, append_peer_tableCFs, disable_peer, disable_table_replication, enable_peer, enable_table_replication, list_peers, list_replicated_tables, remove_peer, remove_peer_tableCFs, set_peer_tableCFs, show_peer_tableCFs

  Group name: snapshots
  Commands: clone_snapshot, delete_all_snapshot, delete_snapshot, list_snapshots, restore_snapshot, snapshot

  Group name: configuration
  Commands: update_all_config, update_config

  Group name: quotas
  Commands: list_quotas, set_quota

  Group name: security
  Commands: grant, list_security_capabilities, revoke, user_permission

  Group name: procedures
  Commands: abort_procedure, list_procedures

  Group name: visibility labels
  Commands: add_labels, clear_auths, get_auths, list_labels, set_auths, set_visibility

SHELL USAGE:
Quote all names in HBase Shell such as table and column names.  Commas delimit
command parameters.  Type <RETURN> after entering a command to run it.
Dictionaries of configuration used in the creation and alteration of tables are
Ruby Hashes. They look like this:

  {'key1' => 'value1', 'key2' => 'value2', ...}

and are opened and closed with curley-braces.  Key/values are delimited by the
'=>' character combination.  Usually keys are predefined constants such as
NAME, VERSIONS, COMPRESSION, etc.  Constants do not need to be quoted.  Type
'Object.constants' to see a (messy) list of all constants in the environment.

If you are using binary keys or values and need to enter them in the shell, use
double-quote'd hexadecimal representation. For example:

  hbase> get 't1', "key\x03\x3f\xcd"
  hbase> get 't1', "key\003\023\011"
  hbase> put 't1', "test\xef\xff", 'f1:', "\x01\x33\x40"

The HBase shell is the (J)Ruby IRB with the above HBase-specific commands added.
For more on the HBase Shell, see http://hbase.apache.org/book.html

hbase(main):006:0> help "list"  ############################################## DESTA FORMA MOSTRA AS OPÇÕES DE UM COMANDO ESPECÍFICO
List all tables in hbase. Optional regular expression parameter could
be used to filter the output. Examples:

  hbase> list
  hbase> list 'abc.*'
  hbase> list 'ns:abc.*'
  hbase> list 'ns:.*'

hbase(main):007:0> ########################### CTRL + D

root@hbase-master:/# exit  ########################### CTRL + D

PS E:\projetos\docker-bigdata>docker-compose stop
