PS E:\projetos\docker-mongodb> wsl -l -v
  NAME                   STATE           VERSION
* docker-desktop-data    Running         2
  docker-desktop         Running         2
  Ubuntu-20.04           Running         2

PS E:\projetos\docker-mongodb> docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

PS E:\projetos\docker-mongodb> docker-compose up -d
Docker Compose is now in the Docker CLI, try `docker compose up`

Starting mongo-express ... done
Starting mongo         ... done

PS E:\projetos\docker-mongodb> docker exec -it mongo bash

root@df666aea22cf:/# mongo
MongoDB shell version v4.4.6
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("68fa9623-97e9-4f04-9bc5-8762b1277965") }
MongoDB server version: 4.4.6
---
The server generated these startup warnings when booting:
        2021-05-11T16:22:58.775+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem
        2021-05-11T16:23:04.238+00:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
        2021-05-11T16:23:04.242+00:00: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never'
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
> db
test

> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB


> use feliciani  ########################### CRIEI O BANCO DE DADOS
switched to db feliciani

> show dbs  ########################### LISTA OS BANCOS DE DADOS. O DB FELICIANI SÓ ESTARÁ NA LISTA QUANDO RECEBER DOCUMENTO
admin   0.000GB
config  0.000GB
local   0.000GB


 ########################### TAB MOSTRA O QUE É POSSÍVEL EXECUTAR

> db. 
db.adminCommand(                   db.fsyncUnlock(                    db.grantPrivilegesToRole(          db.revokeRolesFromUser(
db.aggregate(                      db.getCollection(                  db.grantRolesToRole(               db.runCommand(
db.auth(                           db.getCollectionInfos(             db.grantRolesToUser(               db.runCommandWithMetadata(
db.changeUserPassword(             db.getCollectionNames(             db.groupeval(                      db.runReadCommand(
db.cloneDatabase(                  db.getFreeMonitoringStatus(        db.hasOwnProperty                  db.serverBits(
db.commandHelp(                    db.getLastError(                   db.hello(                          db.serverBuildInfo(
db.constructor                     db.getLastErrorCmd(                db.help(                           db.serverCmdLineOpts(
db.copyDatabase(                   db.getLastErrorObj(                db.hostInfo(                       db.serverStatus(
db.createCollection(               db.getLogComponents(               db.isMaster(                       db.setLogLevel(
db.createRole(                     db.getMongo(                       db.killOP(                         db.setProfilingLevel(
db.createUser(                     db.getName(                        db.killOp(                         db.setSecondaryOk(
db.createView(                     db.getProfilingLevel(              db.listCommands(                   db.setSlaveOk(
db.currentOP(                      db.getProfilingStatus(             db.loadServerScripts(              db.setWriteConcern(
db.currentOp(                      db.getQueryOptions(                db.logout(                         db.shutdownServer(
db.dbEval(                         db.getReplicationInfo(             db.printCollectionStats(           db.stats(
db.disableFreeMonitoring(          db.getRole(                        db.printReplicationInfo(           db.toLocaleString
db.dropAllRoles(                   db.getRoles(                       db.printSecondaryReplicationInfo(  db.toString(
db.dropAllUsers(                   db.getSecondaryOk(                 db.printShardingStatus(            db.tojson(
db.dropDatabase(                   db.getSession(                     db.printSlaveReplicationInfo(      db.unsetWriteConcern(
db.dropRole(                       db.getSiblingDB(                   db.propertyIsEnumerable            db.updateRole(
db.dropUser(                       db.getSisterDB(                    db.prototype                       db.updateUser(
db.enableFreeMonitoring(           db.getSlaveOk(                     db.removeUser(                     db.valueOf
db.eval(                           db.getUser(                        db.resetError(                     db.version(
db.forceError(                     db.getUsers(                       db.revokePrivilegesFromRole(       db.watch(
db.fsyncLock(                      db.getWriteConcern(                db.revokeRolesFromRole(


> db.createCollection('produto')  #################### CRIADA COLEÇÃO PRODUTO
{ "ok" : 1 }


> show dbs
admin      0.000GB
config     0.000GB
feliciani  0.000GB   #################### APÓS CRIADA COLEÇÃO PRODUTO, ESTARÁ NA LISTA
local      0.000GB

> show collections
produto


#################### INSERINDO DOCUMENTO NA COLLECTION produto do BANCO feliciani

> db.produto.insertOne(
... {
... _id: 1, "nome": "cpu i5", "qtd": "15"
... }
... )
{ "acknowledged" : true, "insertedId" : 1 }


> db.produto.find()
{ "_id" : 1, "nome" : "cpu i5", "qtd" : "15" }


#################### INSERINDO DOCUMENTOS NA COLLECTION produto do BANCO feliciani

> db.produto.insertOne({_id: 2, nome: "memória ram", qtd: 10, descricao: {armazenamento: "8GB", tipo: "DDR4"}})
{ "acknowledged" : true, "insertedId" : 2 }

> db.produto.find()
{ "_id" : 1, "nome" : "cpu i5", "qtd" : "15" }
{ "_id" : 2, "nome" : "memória ram", "qtd" : 10, "descricao" : { "armazenamento" : "8GB", "tipo" : "DDR4" } }


> db.produto.insertOne({_id: 3, nome: "mouse", qtd: 50, descricao: {conexao: "USB", so: ["Windows", "Mac", "Linux"]}})
{ "acknowledged" : true, "insertedId" : 3 }


> db.produto.find()
{ "_id" : 1, "nome" : "cpu i5", "qtd" : "15" }
{ "_id" : 2, "nome" : "memória ram", "qtd" : 10, "descricao" : { "armazenamento" : "8GB", "tipo" : "DDR4" } }
{ "_id" : 3, "nome" : "mouse", "qtd" : 50, "descricao" : { "conexao" : "USB", "so" : [ "Windows", "Mac", "Linux" ] } }


> db.produto.insertOne({_id: 4, nome: "hd externo", "qtd": 20, descricao: {conexao: "USB", armazenamento: "500GB", so: ["Windows 10", "Windows 8", "Windows 7"]}
... })
{ "acknowledged" : true, "insertedId" : 4 }


> db.produto.find()
{ "_id" : 1, "nome" : "cpu i5", "qtd" : "15" }
{ "_id" : 2, "nome" : "memória ram", "qtd" : 10, "descricao" : { "armazenamento" : "8GB", "tipo" : "DDR4" } }
{ "_id" : 3, "nome" : "mouse", "qtd" : 50, "descricao" : { "conexao" : "USB", "so" : [ "Windows", "Mac", "Linux" ] } }
{ "_id" : 4, "nome" : "hd externo", "qtd" : 20, "descricao" : { "conexao" : "USB", "armazenamento" : "500GB", "so" : [ "Windows 10", "Windows 8", "Windows 7" ] } }

> ############################################### CTRL + D
bye
root@df666aea22cf:/# exit   ############################################### CTRL + D

PS E:\projetos\docker-mongodb> docker-compose stop

